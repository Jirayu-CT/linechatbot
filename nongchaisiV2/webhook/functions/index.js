/*
Cloud Functions for Firebase 2nd Gen
https://medium.com/firebasethailand/cdda33bbd7dd
*/

const { setGlobalOptions } = require("firebase-functions/v2");
const { onRequest } = require("firebase-functions/v2/https");
const line = require('./util/line');
const dialogflow = require('./util/dialogflow.util');
const gemini = require("./util/gemini");
const NodeCache = require("node-cache");

setGlobalOptions({
    region: "asia-northeast1",
    memory: "1GB",
    concurrency: 40,
});

const CACHE_CHAT = "chat_";
const CACHE_IMAGE = "image_";
const myCache = new NodeCache({ stdTTL: 120, checkperiod: 60 });

function validateWebhook(request, response) {
    if (request.method !== "POST") {
        return response.status(200).send("Method Not Allowed");
    }
    if (!line.verifySignature(request.headers["x-line-signature"], request.body)) {
        return response.status(401).send("Unauthorized");
    }
}

function modef(userId) {
    return myCache.get(userId) || "Dialogflow";
}

exports.webhook = onRequest(async (request, response) => {
    validateWebhook(request, response);

    const events = request.body.events;
    for (const event of events) {
        const userId = event.source.userId;
        let mode = modef(userId);
        let notifyStatus = myCache.get("Notify_" + userId) ?? true;

        switch (event.type) {
            case "follow":
                const profile = await line.getProfile(userId);
                const text = event.follow?.isUnblocked
                    ? `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ${profile.displayName} ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ö‡∏≤‡∏¢‡∏î‡∏µ‡πÑ‡∏´‡∏°`
                    : `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${profile.displayName} ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢ ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö ‡∏≠‡∏ö‡∏ï.‡∏´‡∏ô‡∏≠‡∏á‡∏ä‡∏±‡∏¢‡∏®‡∏£‡∏µ ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`;
                await line.replyWithStateless(event.replyToken, [{ type: "text", text }]);
                break;

            case "unfollow":
                console.log(JSON.stringify(event));
                break;

            case "message":
                if (event.message.type === "text") {
                    let textMessage = event.message.text;

                    if (["‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤", "‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤", "reset"].includes(textMessage)) {
                        await line.isAnimationLoading(userId);
                        mode = "Dialogflow";
                        await line.replyWithStateless(event.replyToken, [{
                            type: "text",
                            sender: { name: "Chatbot" },
                            text: "‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‚úçÔ∏è",
                        }]);
                        myCache.set(userId, mode, 600);
                        myCache.del([CACHE_CHAT + userId, CACHE_IMAGE + userId]);
                        return response.end();
                    }

                    if (mode === "bot") {
                        textMessage = "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö AI " + textMessage;
                    } else if (mode === "staff") {
                        textMessage = "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà " + textMessage;
                    } else {
                        mode = "Dialogflow";
                    }

                    if (textMessage === "testWebhook/jirayu/122333") {
                        await line.replyWithStateless(event.replyToken, [{ type: "text", text: JSON.stringify(event) }]);
                    } 
                    else if (textMessage.includes("‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà")) {
                        if (mode !== "staff" && notifyStatus) {
                            mode = "staff";
                            const profile = await line.getProfile(userId);
                            const payload = [
                                { 
                                    type: "text", 
                                    text: `[‡∏≠‡∏ö‡∏ï.‡∏´‡∏ô‡∏≠‡∏á‡∏ä‡∏±‡∏¢‡∏®‡∏£‡∏µ Chatbot] ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ ${profile.displayName} ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${textMessage.replace("‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ", "")}` 
                                },
                                { 
                                    type: "image", 
                                    originalContentUrl: profile.pictureUrl, 
                                    previewImageUrl: profile.pictureUrl 
                                },
                            ];
                            await line.pushMessageNotify(payload);
                            await line.replyWithStateless(event.replyToken, [{
                                type: "text",
                                sender: { name: "Chatbot" },
                                text: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤ üôè\n‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞‚úçÔ∏è ‡∏ó‡∏≤‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î\n\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏ä‡∏±‡∏¢‡∏®‡∏£‡∏µ: ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå ‡πÄ‡∏ß‡∏•‡∏≤ 8.30 ‡∏ô. - 16.30 ‡∏ô.",
                            }]);
                            myCache.set("Notify_" + userId, false, 600);
                        } else if (mode !== "staff" || textMessage.includes("‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà")) {
                            mode = "staff";
                            await line.replyWithStateless(event.replyToken, [{
                                type: "text",
                                sender: { name: "Chatbot" },
                                text: "‡∏ó‡∏≤‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß \n‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞‚úçÔ∏è ‡∏ó‡∏≤‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î\n\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏ä‡∏±‡∏¢‡∏®‡∏£‡∏µ: ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå ‡πÄ‡∏ß‡∏•‡∏≤ 8.30 ‡∏ô. - 16.30 ‡∏ô.",
                            }]);
                        }
                        myCache.set(userId, mode, 600);
                    } else if (textMessage.includes("‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö AI")) {
                        mode = "bot";

                        await line.isAnimationLoading(userId);
                        const chatHistory = myCache.get(CACHE_CHAT + userId) || [];
                        const question = textMessage.replace("‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö AI ", "");
                        const text = await gemini.chat(chatHistory, question);

                        await line.replyWithStateless(event.replyToken, [{
                            type: "text",
                            sender: { name: "Gemini", iconUrl: "https://wutthipong.info/images/geminiicon.png" },
                            text: `[‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢ AI] ${text}`,
                        }]);
                        chatHistory.push({ role: "user", parts: [{ text: textMessage }] });
                        chatHistory.push({ role: "model", parts: [{ text }] });
                        myCache.set(CACHE_CHAT + userId, chatHistory, 120);
                    } else if (mode === "Dialogflow") {
                        await line.isAnimationLoading(userId);
                        await dialogflow.forwardDialodflow(request);
                    }
                    myCache.set(userId, mode, 600);
                } else if (event.message.type === "image") {
                    if (mode === "staff") {
                        mode = "staff";
                    }
                    else if (mode === "bot") {
                        await line.isAnimationLoading(userId);
                        await line.replyWithStateless(event.replyToken, [{
                            type: "text",
                            sender: { name: "Chatbot" },
                            text: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‚ùóÔ∏è",
                        }]);
                    } else {
                        const question = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö'‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‚ùì";
                        await line.replyWithStateless(event.replyToken, [{
                            type: "text",
                            sender: { name: "Chatbot" },
                            text: question,
                            quickReply: {
                                items: [{
                                    type: "action",
                                    action: { type: "message", label: "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", text: "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" },
                                }],
                            },
                        }]);
                    }
                    myCache.set(userId, mode, 600);
                } else if (event.message.type === "sticker") {
                    if (mode === "bot") {
                        await line.isAnimationLoading(userId);
                        await line.replyWithStateless(event.replyToken, [{
                            type: "text",
                            sender: { name: "Chatbot" },
                            text: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‚ùå AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‚ö†Ô∏è",
                        }]);
                    }
                    myCache.set(userId, mode, 600);
                } else {
                    if (mode !== "staff") {
                        await line.isAnimationLoading(userId);
                        await dialogflow.forwardDialodflow(request);
                        const question = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö'‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‚ùì";
                        await line.replyWithStateless(event.replyToken, [{
                            type: "text",
                            sender: { name: "Chatbot" },
                            text: question,
                            quickReply: {
                                items: [{
                                    type: "action",
                                    action: { type: "message", label: "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", text: "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" },
                                }],
                            },
                        }]);
                    }
                    myCache.set(userId, mode, 600);
                }
                break;

            default:
                return response.end();
        }
    }
    return response.end();
});

exports.dialogflow = onRequest(async (request, response) => {
    console.log("Dialogflow Fullfillment");
    const object = request.body;
    const replyToken = object.originalDetectIntentRequest.payload.data.replyToken;
    const userId = object.originalDetectIntentRequest.payload.data.source.userId;
    const textMessage = object.queryResult.queryText;

    const mode = "Dialogflow";
    const question = "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö AI ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà";
    const answer1 = `‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö AI ${textMessage}`;
    const answer2 = `‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ${textMessage}`;

    await line.replyWithStateless(replyToken, [{
        type: "text",
        text: question,
        sender: { name: "Chatbot" },
        quickReply: {
            items: [
                { type: "action", action: { type: "message", label: "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö AI", text: answer1 } },
                { type: "action", action: { type: "message", label: "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", text: answer2 } },
            ],
        },
    }]);
    myCache.set(userId, mode, 600);
    return response.end();
});